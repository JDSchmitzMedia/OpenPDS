var Resource = require('deployd/lib/resource')
  , Script = require('deployd/lib/script')
  , util = require('util');

function AnswerResource() {
  Resource.apply(this, arguments);
}
util.inherits(AnswerResource, Resource);

function OAuthServerCallback(ctx, callback){
var scope_array = new Array();
var options = {
    host: 'celldata.media.mit.edu',
    port: 80,
    path: '/get_key_from_token?bearer_token='+ctx.query.bearer_token,
    method: 'GET'
  };
  var req = http.get(options, function(res) {
    var pageData = "";
    res.setEncoding('utf8');
    res.on('data', function (chunk) {
      pageData += chunk;
    });

    res.on('end', function(){
      var obj = {}
      try
      {
        obj = JSON.parse(pageData);
        var len = obj.scopes.length;
        for (var i = 0; i < len; i++)
        {
          scope_array[i] = { 'key': obj.scopes[i] };
        }
        callback(scope_array);
      }
      catch(err)
      {
        throw ctx.done(obj);
      }
    });
  });
}



AnswerResource.label = "Answer";
AnswerResource.events = ["get", "post"];

module.exports = AnswerResource;

AnswerResource.prototype.clientGeneration = true;

AnswerResource.prototype.handle = function (ctx, next) {
  var parts = ctx.url.split('/').filter(function(p) { return p; });

  var result = {};

  var domain = {
      url: ctx.url
    , parts: parts
    , query: ctx.query
    , body: ctx.body
    , 'this': result
    , setResult: function(val) {
      result = val;
    }
  };

  if (ctx.method === "POST" && this.events.post) {
    this.events.post.run(ctx, domain, function(err) {
      ctx.done(err, result);
    });
  } else if (ctx.method === "GET" && this.events.get) {
		
//	  console.log(this.name);
//		OAuthServerCallback(ctx, callback)
    this.events.get.run(ctx, domain, function(err) {
      ctx.done(err, result);
    });
  } else {
    next();
  }

  
};
